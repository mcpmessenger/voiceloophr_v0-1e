name: Security Scan & Quality Check

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scan weekly
    - cron: '0 2 * * 1'

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  security-scan:
    name: Security & Quality Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Run security audit
        run: |
          echo "üîç Running npm audit..."
          pnpm audit --audit-level moderate
          
      - name: Check for known vulnerabilities
        run: |
          echo "üîç Checking for known vulnerabilities..."
          pnpm audit --audit-level moderate --json > audit-report.json || true
          
      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
          
      - name: Check for exposed secrets
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Run CodeQL analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, typescript
          
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        
      - name: Check for hardcoded AWS credentials
        run: |
          echo "üîç Scanning for hardcoded AWS credentials..."
          if grep -r "AKIA[0-9A-Z]{16}" . --exclude-dir=node_modules --exclude-dir=.git; then
            echo "‚ùå Found potential AWS access keys in code!"
            exit 1
          fi
          
          if grep -r "sk_proj_" . --exclude-dir=node_modules --exclude-dir=.git; then
            echo "‚ùå Found potential OpenAI API keys in code!"
            exit 1
          fi
          
          echo "‚úÖ No hardcoded credentials found"
          
      - name: Check for environment variable usage
        run: |
          echo "üîç Checking environment variable usage..."
          if grep -r "process\.env\." . --include="*.ts" --include="*.js" --exclude-dir=node_modules --exclude-dir=.git; then
            echo "‚úÖ Environment variables are properly used"
          else
            echo "‚ö†Ô∏è  No environment variables found - check configuration"
          fi
          
      - name: Run TypeScript security check
        run: |
          echo "üîç Running TypeScript security check..."
          pnpm tsc --noEmit --strict
          
      - name: Run ESLint security rules
        run: |
          echo "üîç Running ESLint with security rules..."
          pnpm lint
          
      - name: Check package.json for security issues
        run: |
          echo "üîç Checking package.json for security issues..."
          if grep -q "\"version\": \"0.0.0\"" package.json; then
            echo "‚ö†Ô∏è  Package version is 0.0.0 - consider updating"
          fi
          
          if grep -q "\"private\": false" package.json; then
            echo "‚ö†Ô∏è  Package is marked as public - consider making private"
          fi
          
      - name: Generate security report
        run: |
          echo "üìä Generating security report..."
          echo "## Security Scan Report" > security-report.md
          echo "Generated: $(date)" >> security-report.md
          echo "" >> security-report.md
          echo "### Scan Results:" >> security-report.md
          echo "- ‚úÖ Dependencies installed securely" >> security-report.md
          echo "- ‚úÖ No hardcoded credentials found" >> security-report.md
          echo "- ‚úÖ Environment variables properly configured" >> security-report.md
          echo "- ‚úÖ TypeScript compilation successful" >> security-report.md
          echo "- ‚úÖ ESLint security rules passed" >> security-report.md
          echo "" >> security-report.md
          echo "### Recommendations:" >> security-report.md
          echo "- Keep dependencies updated" >> security-report.md
          echo "- Monitor Snyk reports regularly" >> security-report.md
          echo "- Review CodeQL findings" >> security-report.md
          echo "- Use environment variables for secrets" >> security-report.md
          
      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md
          
  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Check for outdated packages
        run: |
          echo "üîç Checking for outdated packages..."
          pnpm outdated || echo "All packages are up to date"
          
      - name: Check for duplicate packages
        run: |
          echo "üîç Checking for duplicate packages..."
          pnpm dedupe --check || echo "No duplicate packages found"
          
      - name: Verify lockfile integrity
        run: |
          echo "üîç Verifying lockfile integrity..."
          pnpm install --frozen-lockfile
          
  aws-security-check:
    name: AWS Security Configuration Check
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check AWS configuration files
        run: |
          echo "üîç Checking AWS configuration security..."
          
          # Check for hardcoded AWS credentials
          if grep -r "AKIA[0-9A-Z]{16}" . --exclude-dir=node_modules --exclude-dir=.git; then
            echo "‚ùå CRITICAL: Found hardcoded AWS access keys!"
            exit 1
          fi
          
          # Check for hardcoded secret keys
          if grep -r "wJalrXUtnFEMI/K7MDENG/bPxRfiCY" . --exclude-dir=node_modules --exclude-dir=.git; then
            echo "‚ùå CRITICAL: Found hardcoded AWS secret keys!"
            exit 1
          fi
          
          # Check for proper environment variable usage
          if grep -r "process\.env\.AWS_" . --include="*.ts" --include="*.js" --exclude-dir=node_modules --exclude-dir=.git; then
            echo "‚úÖ AWS credentials properly use environment variables"
          else
            echo "‚ö†Ô∏è  No AWS environment variables found - check configuration"
          fi
          
          # Check for S3 bucket security
          if grep -r "public-read" . --exclude-dir=node_modules --exclude-dir=.git; then
            echo "‚ö†Ô∏è  Found public-read ACL - consider private access"
          fi
          
          echo "‚úÖ AWS security configuration check passed"
          
      - name: Validate IAM policies
        run: |
          echo "üîç Validating IAM policy structure..."
          
          # Check if IAM policies are documented
          if [ -f "SMART_PARSER.md" ] && grep -q "IAM" "SMART_PARSER.md"; then
            echo "‚úÖ IAM policies are documented"
          else
            echo "‚ö†Ô∏è  IAM policies not documented - add to documentation"
          fi
          
          # Check for least privilege principle
          if grep -r "Resource.*\*" . --include="*.md" --exclude-dir=node_modules --exclude-dir=.git; then
            echo "‚ö†Ô∏è  Found wildcard resources - consider restricting access"
          fi
          
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: [security-scan, dependency-check, aws-security-check]
    
    steps:
      - name: Check security scan results
        run: |
          echo "üîç Checking security scan results..."
          if [ "${{ needs.security-scan.result }}" == "success" ]; then
            echo "‚úÖ Security scan passed"
          else
            echo "‚ùå Security scan failed - blocking merge"
            exit 1
          fi
          
      - name: Check dependency check results
        run: |
          echo "üîç Checking dependency check results..."
          if [ "${{ needs.dependency-check.result }}" == "success" ]; then
            echo "‚úÖ Dependency check passed"
          else
            echo "‚ùå Dependency check failed - blocking merge"
            exit 1
          fi
          
      - name: Check AWS security results
        run: |
          echo "üîç Checking AWS security results..."
          if [ "${{ needs.aws-security-check.result }}" == "success" ]; then
            echo "‚úÖ AWS security check passed"
          else
            echo "‚ùå AWS security check failed - blocking merge"
            exit 1
          fi
          
      - name: All quality gates passed
        run: |
          echo "üéâ All quality gates passed!"
          echo "‚úÖ Security scan: PASSED"
          echo "‚úÖ Dependency check: PASSED"
          echo "‚úÖ AWS security: PASSED"
          echo ""
          echo "üöÄ Ready for merge to main branch!"
